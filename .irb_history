Time.n
Time.now
Time.current
exit
Time.current
Time.now
exit
pp $LOAD_PATH
pp ActiveSupport::Dependencies.autoload_paths
Rails.autoloaders.zeitwerk_enabled?
quit
Hirb::View.enabled?
puts Hirb::Helpers::Table.render [[1,2], [2,3]]
exit
user = User.new
user = User.new
user = User.new
user = User.new
user.save
user.errors.full_messages
I18n.t("activerecord.attributes.user")
user.password = "あああああああ"
user.password
user.false
user.save
user.errors.full_messages
exit
User.create(email: "a@a.a")
exit
exit
domain = "@example.com"
email = "a" * (256 - domain.length) + domain
email
user = User.new(name: "test", email: email, password: "password")
user
user.save
user.errors.full_messages
email = "a@a@a.com"
user.email = email
user.email
user.save
user.errors.full_messages
email = "a@a.a"
User.create(name: "test", email: email, password: "password")
User.last.update(activated: true)
User.create(name: "test", email: email, password: "password")
user = User.new(name: "test", email: email, password: "password")
user.errors.full_messages
user
user.save
user.errors.full_messages
email = "A@A.A"
user = User.new(name: "test", email: email, password: "password")
user.save
user.email
exit
User.all
exit
wxit
exit
q
quit
quit
quit
log
logs
user.save
user.errors.full_messages
quit
payload = { sub: 1 }
Hirb.disable
payload
secret_key = Rails.application.credentials.se
secret_key = Rails.application.credentials.secret_key_base
token = JWT.encode(payload, secret_key)
token
token = JWT.decode(token, secret_key)
quit
Hirb.disable
payload = { sub: 1 }
secret_key = Rails.application.credentials.secret_key_base
payload = { sub: 1 }
token = JWT.decode(token, secret_key)
token = JWT.encode(payload, secret_key)
token = JWT.decode(token, secret_key)
quit
UserAuth
UserAuth.token_issuer
UserAuth.token_audience
exit
Hirb.disable
include UserAuth::TokenCommons
encrypt = UserAuth::TokenCommons.encrypt_for(1)
encrypt
encrypt = UserAuth::TokenCommons.encrypt_for(1)
encrypt
user_id = UserAuth::TokenCommons.decrypt_for(encrypt)
user_id = UserAuth::TokenCommons.decrypt_for(encrypt + "a")
User.find user_id
exit
User.first
reload!
user = User.first
user
user.remember("a")
user
user.forget
user
token1 = UserAuth::RefreshToken.new(user)
token1 = UserAuth::RefreshToken.new(user_id: user.id)
token1
token1.payload[:jti]
user.reload
user.refresh_jti == token1.payload[:jtl]
user.refresh_jti == token1.payload[:jti]
UserAuth::RefreshToken.new(token: token1.token)
UserAuth::RefreshToken.new(token: token1.token).entity_for_user
user.reload
UserAuth::RefreshToken.new(user_id: user.id)
user.reload
user.refresh_jti == token1.payload[:jti]
UserAuth::RefreshToken.new(token: token1.token).entity_for_user
docker-compose run --rm api rails g integration_test RefreshToken
exit
Hirb.disable
user = User.first
token = UserAuth::AccessToken.new(user_id: user.id)
token
UserAuth::AccessToken.new(token: token.token)
UserAuth::AccessToken.new(token: token.token).entity_for_user
Time.at(token.payload[:exp])
token = UserAuth::AccessToken.new(user_id: user.id, payload: {lifetime: 1.hours})
token
Time.at(token.payload{})
token.lifetime_text
UserAuth::AccessToken.new(user_id: user.id, payload: {lifetime: 1.day})
token.lifetime_text
UserAuth::AccessToken.new(token: token.token, option: {sub: "1"})
UserAuth::AccessToken.new(token: token.token, options: {sub: "1"})
token.payload[:sub]
sub = token.payload[:sub]
UserAuth::AccessToken.new(token: token.token, options: {sub: sub})
UserAuth::AccessToken.new(token: token.token, options: {sub: sub}).entity_for_user
exit
User.decode_access_token(access_token)
user.encode_refresh_token
user.encode_refresh_token
User.first
user.encode_access_token
User.first
user.encode_access_token
exir
exit
User.first
user = User.first
user.encode_access_token
user.to_access_token
User.decode_access_token
User.decode_access_token(access_token\
)
User.decode_access_token(access_token)
encode = user.encode_refresh_token
encode
User.from_refresh_token(encode.token)
user
user.reload
user
access_token = user.to_access_token
access_token
User.from_access_token(access_token)
User.decode_access_token(access_token)
exit
